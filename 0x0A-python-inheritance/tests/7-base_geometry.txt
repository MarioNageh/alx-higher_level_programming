1-my_list.txt
==============
import the module:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

::

    >>> print(bg) # doctest: +ELLIPSIS
    <7-base_geometry.BaseGeometry object at ...>

In fact, any arguments supplied to an instantiation of ``BaseGeometry`` results
in a TypeError.

::
>>> bg = BaseGeometry(None)
Traceback (most recent call last):
TypeError: BaseGeometry() takes no arguments

    |||||||||||||| Checking Non Passed Parameters |||||||||||||

>>> bg = BaseGeometry()
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'


>>> bg.integer_validator("mario")
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

    |||||||||||||| Checking the String Error |||||||||||||

>>> bg.integer_validator("mario", "12")
Traceback (most recent call last):
TypeError: mario must be an integer


>>> bg.integer_validator("mario", 0)
Traceback (most recent call last):
ValueError: mario must be greater than 0





>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented